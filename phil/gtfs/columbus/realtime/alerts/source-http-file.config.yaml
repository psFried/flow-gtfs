---
parser:
  compression: ~
  format:
    config:
      delimiter: ~
      encoding: ~
      errorThreshold: 0
      escape: ~
      headers: []
      lineEnding: ~
      message: FeedMessage
      protoFile: "// Copyright 2015 The GTFS Specifications Authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// Protocol definition file for GTFS Realtime.\n//\n// GTFS Realtime lets transit agencies provide consumers with realtime\n// information about disruptions to their service (stations closed, lines not\n// operating, important delays etc), location of their vehicles and expected\n// arrival times.\n//\n// This protocol is published at:\n// https://github.com/google/transit/tree/master/gtfs-realtime\n\nsyntax = \"proto2\";\noption java_package = \"com.google.transit.realtime\";\npackage transit_realtime;\n\n// The contents of a feed message.\n// A feed is a continuous stream of feed messages. Each message in the stream is\n// obtained as a response to an appropriate HTTP GET request.\n// A realtime feed is always defined with relation to an existing GTFS feed.\n// All the entity ids are resolved with respect to the GTFS feed.\n// Note that \"required\" and \"optional\" as stated in this file refer to Protocol\n// Buffer cardinality, not semantic cardinality.  See reference.md at\n// https://github.com/google/transit/tree/master/gtfs-realtime for field\n// semantic cardinality.\nmessage FeedMessage {\n  // Metadata about this feed and feed message.\n  required FeedHeader header = 1;\n\n  // Contents of the feed.\n  repeated FeedEntity entity = 2;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// Metadata about a feed, included in feed messages.\nmessage FeedHeader {\n  // Version of the feed specification.\n  // The current version is 2.0.  Valid versions are \"2.0\", \"1.0\".\n  required string gtfs_realtime_version = 1;\n\n  // Determines whether the current fetch is incremental.  Currently,\n  // DIFFERENTIAL mode is unsupported and behavior is unspecified for feeds\n  // that use this mode.  There are discussions on the GTFS Realtime mailing\n  // list around fully specifying the behavior of DIFFERENTIAL mode and the\n  // documentation will be updated when those discussions are finalized.\n  enum Incrementality {\n    FULL_DATASET = 0;\n    DIFFERENTIAL = 1;\n  }\n  optional Incrementality incrementality = 2 [default = FULL_DATASET];\n\n  // This timestamp identifies the moment when the content of this feed has been\n  // created (in server time). In POSIX time (i.e., number of seconds since\n  // January 1st 1970 00:00:00 UTC).\n  optional uint64 timestamp = 3;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// A definition (or update) of an entity in the transit feed.\nmessage FeedEntity {\n  // The ids are used only to provide incrementality support. The id should be\n  // unique within a FeedMessage. Consequent FeedMessages may contain\n  // FeedEntities with the same id. In case of a DIFFERENTIAL update the new\n  // FeedEntity with some id will replace the old FeedEntity with the same id\n  // (or delete it - see is_deleted below).\n  // The actual GTFS entities (e.g. stations, routes, trips) referenced by the\n  // feed must be specified by explicit selectors (see EntitySelector below for\n  // more info).\n  required string id = 1;\n\n  // Whether this entity is to be deleted. Relevant only for incremental\n  // fetches.\n  optional bool is_deleted = 2 [default = false];\n\n  // Data about the entity itself. Exactly one of the following fields must be\n  // present (unless the entity is being deleted).\n  optional TripUpdate trip_update = 3;\n  optional VehiclePosition vehicle = 4;\n  optional Alert alert = 5;\n\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional Shape shape = 6;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n//\n// Entities used in the feed.\n//\n\n// Realtime update of the progress of a vehicle along a trip.\n// Depending on the value of ScheduleRelationship, a TripUpdate can specify:\n// - A trip that proceeds along the schedule.\n// - A trip that proceeds along a route but has no fixed schedule.\n// - A trip that have been added or removed with regard to schedule.\n//\n// The updates can be for future, predicted arrival/departure events, or for\n// past events that already occurred.\n// Normally, updates should get more precise and more certain (see\n// uncertainty below) as the events gets closer to current time.\n// Even if that is not possible, the information for past events should be\n// precise and certain. In particular, if an update points to time in the past\n// but its update's uncertainty is not 0, the client should conclude that the\n// update is a (wrong) prediction and that the trip has not completed yet.\n//\n// Note that the update can describe a trip that is already completed.\n// To this end, it is enough to provide an update for the last stop of the trip.\n// If the time of that is in the past, the client will conclude from that that\n// the whole trip is in the past (it is possible, although inconsequential, to\n// also provide updates for preceding stops).\n// This option is most relevant for a trip that has completed ahead of schedule,\n// but according to the schedule, the trip is still proceeding at the current\n// time. Removing the updates for this trip could make the client assume\n// that the trip is still proceeding.\n// Note that the feed provider is allowed, but not required, to purge past\n// updates - this is one case where this would be practically useful.\nmessage TripUpdate {\n  // The Trip that this message applies to. There can be at most one\n  // TripUpdate entity for each actual trip instance.\n  // If there is none, that means there is no prediction information available.\n  // It does *not* mean that the trip is progressing according to schedule.\n  required TripDescriptor trip = 1;\n\n  // Additional information on the vehicle that is serving this trip.\n  optional VehicleDescriptor vehicle = 3;\n\n  // Timing information for a single predicted event (either arrival or\n  // departure).\n  // Timing consists of delay and/or estimated time, and uncertainty.\n  // - delay should be used when the prediction is given relative to some\n  //   existing schedule in GTFS.\n  // - time should be given whether there is a predicted schedule or not. If\n  //   both time and delay are specified, time will take precedence\n  //   (although normally, time, if given for a scheduled trip, should be\n  //   equal to scheduled time in GTFS + delay).\n  //\n  // Uncertainty applies equally to both time and delay.\n  // The uncertainty roughly specifies the expected error in true delay (but\n  // note, we don't yet define its precise statistical meaning). It's possible\n  // for the uncertainty to be 0, for example for trains that are driven under\n  // computer timing control.\n  message StopTimeEvent {\n    // Delay (in seconds) can be positive (meaning that the vehicle is late) or\n    // negative (meaning that the vehicle is ahead of schedule). Delay of 0\n    // means that the vehicle is exactly on time.\n    optional int32 delay = 1;\n\n    // Event as absolute time.\n    // In Unix time (i.e., number of seconds since January 1st 1970 00:00:00\n    // UTC).\n    optional int64 time = 2;\n\n    // If uncertainty is omitted, it is interpreted as unknown.\n    // If the prediction is unknown or too uncertain, the delay (or time) field\n    // should be empty. In such case, the uncertainty field is ignored.\n    // To specify a completely certain prediction, set its uncertainty to 0.\n    optional int32 uncertainty = 3;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features\n    // and modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n\n  // Realtime update for arrival and/or departure events for a given stop on a\n  // trip. Updates can be supplied for both past and future events.\n  // The producer is allowed, although not required, to drop past events.\n  message StopTimeUpdate {\n    // The update is linked to a specific stop either through stop_sequence or\n    // stop_id, so one of the fields below must necessarily be set.\n    // See the documentation in TripDescriptor for more information.\n\n    // Must be the same as in stop_times.txt in the corresponding GTFS feed.\n    optional uint32 stop_sequence = 1;\n    // Must be the same as in stops.txt in the corresponding GTFS feed.\n    optional string stop_id = 4;\n\n    optional StopTimeEvent arrival = 2;\n    optional StopTimeEvent departure = 3;\n\n    // Expected occupancy after departure from the given stop.\n    // Should be provided only for future stops.\n    // In order to provide departure_occupancy_status without either arrival or\n    // departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. \n    optional VehiclePosition.OccupancyStatus departure_occupancy_status = 7;\n    \n    // The relation between the StopTimeEvents and the static schedule.\n    enum ScheduleRelationship {\n      // The vehicle is proceeding in accordance with its static schedule of\n      // stops, although not necessarily according to the times of the schedule.\n      // At least one of arrival and departure must be provided. If the schedule\n      // for this stop contains both arrival and departure times then so must\n      // this update. Frequency-based trips (GTFS frequencies.txt with exact_times = 0)\n      // should not have a SCHEDULED value and should use UNSCHEDULED instead.\n      SCHEDULED = 0;\n\n      // The stop is skipped, i.e., the vehicle will not stop at this stop.\n      // Arrival and departure are optional.\n      SKIPPED = 1;\n\n      // No StopTimeEvents are given for this stop.\n      // The main intention for this value is to give time predictions only for\n      // part of a trip, i.e., if the last update for a trip has a NO_DATA\n      // specifier, then StopTimeEvents for the rest of the stops in the trip\n      // are considered to be unspecified as well.\n      // Neither arrival nor departure should be supplied.\n      NO_DATA = 2;\n\n      // The vehicle is operating a trip defined in GTFS frequencies.txt with exact_times = 0.\n      // This value should not be used for trips that are not defined in GTFS frequencies.txt,\n      // or trips in GTFS frequencies.txt with exact_times = 1. Trips containing StopTimeUpdates\n      // with ScheduleRelationship=UNSCHEDULED must also set TripDescriptor.ScheduleRelationship=UNSCHEDULED.\n      // NOTE: This field is still experimental, and subject to change. It may be\n      // formally adopted in the future.\n      UNSCHEDULED = 3;\n    }\n    optional ScheduleRelationship schedule_relationship = 5\n        [default = SCHEDULED];\n\n    // Provides the updated values for the stop time.\n    // NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.\n    message StopTimeProperties {\n      // Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.\n      // The new assigned_stop_id should not result in a significantly different trip experience for the end user than\n      // the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an\n      // \"unusual change\" if the new stop was presented within an app without any additional context.\n      // For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the\n      // same station as the stop originally defined in GTFS stop_times.txt.\n      // To assign a stop without providing any real-time arrival or departure predictions, populate this field and set\n      // StopTimeUpdate.schedule_relationship = NO_DATA.\n      // If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If\n      // `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.\n      // Platform assignments should be reflected in other GTFS-realtime fields as well\n      // (e.g., `VehiclePosition.stop_id`).\n      // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n      optional string assigned_stop_id = 1;\n\n      // The extensions namespace allows 3rd-party developers to extend the\n      // GTFS Realtime Specification in order to add and evaluate new features\n      // and modifications to the spec.\n      extensions 1000 to 1999;\n\n      // The following extension IDs are reserved for private use by any organization.\n      extensions 9000 to 9999;\n    }\n\n    // Realtime updates for certain properties defined within GTFS stop_times.txt\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional StopTimeProperties stop_time_properties = 6;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features\n    // and modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n\n  // Updates to StopTimes for the trip (both future, i.e., predictions, and in\n  // some cases, past ones, i.e., those that already happened).\n  // The updates must be sorted by stop_sequence, and apply for all the\n  // following stops of the trip up to the next specified one.\n  //\n  // Example 1:\n  // For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure\n  // delay of 0 for stop_sequence of the current stop means that the trip is\n  // exactly on time.\n  //\n  // Example 2:\n  // For the same trip instance, 3 StopTimeUpdates are provided:\n  // - delay of 5 min for stop_sequence 3\n  // - delay of 1 min for stop_sequence 8\n  // - delay of unspecified duration for stop_sequence 10\n  // This will be interpreted as:\n  // - stop_sequences 3,4,5,6,7 have delay of 5 min.\n  // - stop_sequences 8,9 have delay of 1 min.\n  // - stop_sequences 10,... have unknown delay.\n  repeated StopTimeUpdate stop_time_update = 2;\n\n  // The most recent moment at which the vehicle's real-time progress was measured\n  // to estimate StopTimes in the future. When StopTimes in the past are provided,\n  // arrival/departure times may be earlier than this value. In POSIX\n  // time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC).\n  optional uint64 timestamp = 4;\n\n  // The current schedule deviation for the trip.  Delay should only be\n  // specified when the prediction is given relative to some existing schedule\n  // in GTFS.\n  //\n  // Delay (in seconds) can be positive (meaning that the vehicle is late) or\n  // negative (meaning that the vehicle is ahead of schedule). Delay of 0\n  // means that the vehicle is exactly on time.\n  //\n  // Delay information in StopTimeUpdates take precedent of trip-level delay\n  // information, such that trip-level delay is only propagated until the next\n  // stop along the trip with a StopTimeUpdate delay value specified.\n  //\n  // Feed providers are strongly encouraged to provide a TripUpdate.timestamp\n  // value indicating when the delay value was last updated, in order to\n  // evaluate the freshness of the data.\n  //\n  // NOTE: This field is still experimental, and subject to change. It may be\n  // formally adopted in the future.\n  optional int32 delay = 5;\n\n  // Defines updated properties of the trip, such as a new shape_id when there is a detour. Or defines the\n  // trip_id, start_date, and start_time of a DUPLICATED trip. \n  // NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.\n  message TripProperties {\n    // Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt\n    // but will start at a different service date and/or time (defined using the TripProperties.start_date and\n    // TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different\n    // than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not\n    // be populated and will be ignored by consumers.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional string trip_id = 1;\n    // Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if\n    // schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional string start_date = 2;\n    // Defines the departure start time of the trip when it’s duplicated. See definition of stop_times.departure_time\n    // in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset\n    // between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a\n    // departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value\n    // of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction\n    // delay values are applied to this calculated schedule time to determine the predicted time. For example, if a\n    // departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time\n    // prediction time values do not have any offset applied to them and indicate the predicted time as provided.\n    // For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time\n    // is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be\n    // populated and will be ignored by consumers.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional string start_time = 3;\n    // Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in\n    // (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing\n    // paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS\n    // nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt\n    // or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as\n    // (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should\n    // be marked as schedule_relationship=SKIPPED.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. \n    optional string shape_id = 4;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features\n    // and modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n  optional TripProperties trip_properties = 6;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// Realtime positioning information for a given vehicle.\nmessage VehiclePosition {\n  // The Trip that this vehicle is serving.\n  // Can be empty or partial if the vehicle can not be identified with a given\n  // trip instance.\n  optional TripDescriptor trip = 1;\n\n  // Additional information on the vehicle that is serving this trip.\n  optional VehicleDescriptor vehicle = 8;\n\n  // Current position of this vehicle.\n  optional Position position = 2;\n\n  // The stop sequence index of the current stop. The meaning of\n  // current_stop_sequence (i.e., the stop that it refers to) is determined by\n  // current_status.\n  // If current_status is missing IN_TRANSIT_TO is assumed.\n  optional uint32 current_stop_sequence = 3;\n  // Identifies the current stop. The value must be the same as in stops.txt in\n  // the corresponding GTFS feed.\n  optional string stop_id = 7;\n\n  enum VehicleStopStatus {\n    // The vehicle is just about to arrive at the stop (on a stop\n    // display, the vehicle symbol typically flashes).\n    INCOMING_AT = 0;\n\n    // The vehicle is standing at the stop.\n    STOPPED_AT = 1;\n\n    // The vehicle has departed and is in transit to the next stop.\n    IN_TRANSIT_TO = 2;\n  }\n  // The exact status of the vehicle with respect to the current stop.\n  // Ignored if current_stop_sequence is missing.\n  optional VehicleStopStatus current_status = 4 [default = IN_TRANSIT_TO];\n\n  // Moment at which the vehicle's position was measured. In POSIX time\n  // (i.e., number of seconds since January 1st 1970 00:00:00 UTC).\n  optional uint64 timestamp = 5;\n\n  // Congestion level that is affecting this vehicle.\n  enum CongestionLevel {\n    UNKNOWN_CONGESTION_LEVEL = 0;\n    RUNNING_SMOOTHLY = 1;\n    STOP_AND_GO = 2;\n    CONGESTION = 3;\n    SEVERE_CONGESTION = 4;  // People leaving their cars.\n  }\n  optional CongestionLevel congestion_level = 6;\n\n  // The state of passenger occupancy for the vehicle or carriage.\n  // Individual producers may not publish all OccupancyStatus values. Therefore, consumers\n  // must not assume that the OccupancyStatus values follow a linear scale.\n  // Consumers should represent OccupancyStatus values as the state indicated \n  // and intended by the producer. Likewise, producers must use OccupancyStatus values that\n  // correspond to actual vehicle occupancy states.\n  // For describing passenger occupancy levels on a linear scale, see `occupancy_percentage`.\n  // This field is still experimental, and subject to change. It may be formally adopted in the future.\n  enum OccupancyStatus {\n    // The vehicle or carriage is considered empty by most measures, and has few or no\n    // passengers onboard, but is still accepting passengers.\n    EMPTY = 0;\n\n    // The vehicle or carriage has a large number of seats available.\n    // The amount of free seats out of the total seats available to be\n    // considered large enough to fall into this category is determined at the\n    // discretion of the producer.\n    MANY_SEATS_AVAILABLE = 1;\n\n    // The vehicle or carriage has a relatively small number of seats available.\n    // The amount of free seats out of the total seats available to be\n    // considered small enough to fall into this category is determined at the\n    // discretion of the feed producer.\n    FEW_SEATS_AVAILABLE = 2;\n\n    // The vehicle or carriage can currently accommodate only standing passengers.\n    STANDING_ROOM_ONLY = 3;\n\n    // The vehicle or carriage can currently accommodate only standing passengers\n    // and has limited space for them.\n    CRUSHED_STANDING_ROOM_ONLY = 4;\n\n    // The vehicle or carriage is considered full by most measures, but may still be\n    // allowing passengers to board.\n    FULL = 5;\n\n    // The vehicle or carriage is not accepting passengers, but usually accepts passengers for boarding.\n    NOT_ACCEPTING_PASSENGERS = 6;\n\n    // The vehicle or carriage doesn't have any occupancy data available at that time.\n    NO_DATA_AVAILABLE = 7;\n\n    // The vehicle or carriage is not boardable and never accepts passengers.\n    // Useful for special vehicles or carriages (engine, maintenance carriage, etc…).\n    NOT_BOARDABLE = 8;\n\n  }\n  // If multi_carriage_status is populated with per-carriage OccupancyStatus,\n  // then this field should describe the entire vehicle with all carriages accepting passengers considered.\n  optional OccupancyStatus occupancy_status = 9;\n\n  // A percentage value indicating the degree of passenger occupancy in the vehicle.\n  // The values are represented as an integer without decimals. 0 means 0% and 100 means 100%.\n  // The value 100 should represent the total maximum occupancy the vehicle was designed for,\n  // including both seated and standing capacity, and current operating regulations allow.\n  // The value may exceed 100 if there are more passengers than the maximum designed capacity.\n  // The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle.\n  // If multi_carriage_status is populated with per-carriage occupancy_percentage, \n  // then this field should describe the entire vehicle with all carriages accepting passengers considered.\n  // This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional uint32 occupancy_percentage = 10;\n\n  // Carriage specific details, used for vehicles composed of several carriages\n  // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n  message CarriageDetails {\n\n    // Identification of the carriage. Should be unique per vehicle.\n    optional string id = 1;\n\n    // User visible label that may be shown to the passenger to help identify\n    // the carriage. Example: \"7712\", \"Car ABC-32\", etc...\n    // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional string label = 2;\n\n    // Occupancy status for this given carriage, in this vehicle\n    // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional OccupancyStatus occupancy_status = 3 [default = NO_DATA_AVAILABLE];\n\n    // Occupancy percentage for this given carriage, in this vehicle.\n    // Follows the same rules as \"VehiclePosition.occupancy_percentage\"\n    // -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)\n    // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional int32 occupancy_percentage = 4 [default = -1];\n\n    // Identifies the order of this carriage with respect to the other\n    // carriages in the vehicle's list of CarriageDetails.\n    // The first carriage in the direction of travel must have a value of 1.\n    // The second value corresponds to the second carriage in the direction\n    // of travel and must have a value of 2, and so forth.\n    // For example, the first carriage in the direction of travel has a value of 1.\n    // If the second carriage in the direction of travel has a value of 3,\n    // consumers will discard data for all carriages (i.e., the multi_carriage_details field).\n    // Carriages without data must be represented with a valid carriage_sequence number and the fields \n    // without data should be omitted (alternately, those fields could also be included and set to the \"no data\" values).\n    // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n    optional uint32 carriage_sequence = 5;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features and\n    // modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n\n  // Details of the multiple carriages of this given vehicle.\n  // The first occurrence represents the first carriage of the vehicle, \n  // given the current direction of travel. \n  // The number of occurrences of the multi_carriage_details \n  // field represents the number of carriages of the vehicle.\n  // It also includes non boardable carriages, \n  // like engines, maintenance carriages, etc… as they provide valuable \n  // information to passengers about where to stand on a platform.\n  // This message/field is still experimental, and subject to change. It may be formally adopted in the future.\n  repeated CarriageDetails multi_carriage_details = 11;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// An alert, indicating some sort of incident in the public transit network.\nmessage Alert {\n  // Time when the alert should be shown to the user. If missing, the\n  // alert will be shown as long as it appears in the feed.\n  // If multiple ranges are given, the alert will be shown during all of them.\n  repeated TimeRange active_period = 1;\n\n  // Entities whose users we should notify of this alert.\n  repeated EntitySelector informed_entity = 5;\n\n  // Cause of this alert. If cause_detail is included, then Cause must also be included.\n  enum Cause {\n    UNKNOWN_CAUSE = 1;\n    OTHER_CAUSE = 2;        // Not machine-representable.\n    TECHNICAL_PROBLEM = 3;\n    STRIKE = 4;             // Public transit agency employees stopped working.\n    DEMONSTRATION = 5;      // People are blocking the streets.\n    ACCIDENT = 6;\n    HOLIDAY = 7;\n    WEATHER = 8;\n    MAINTENANCE = 9;\n    CONSTRUCTION = 10;\n    POLICE_ACTIVITY = 11;\n    MEDICAL_EMERGENCY = 12;\n  }\n  optional Cause cause = 6 [default = UNKNOWN_CAUSE];\n\n  // What is the effect of this problem on the affected entity. If effect_detail is included, then Effect must also be included.\n  enum Effect {\n    NO_SERVICE = 1;\n    REDUCED_SERVICE = 2;\n\n    // We don't care about INsignificant delays: they are hard to detect, have\n    // little impact on the user, and would clutter the results as they are too\n    // frequent.\n    SIGNIFICANT_DELAYS = 3;\n\n    DETOUR = 4;\n    ADDITIONAL_SERVICE = 5;\n    MODIFIED_SERVICE = 6;\n    OTHER_EFFECT = 7;\n    UNKNOWN_EFFECT = 8;\n    STOP_MOVED = 9;\n    NO_EFFECT = 10;\n    ACCESSIBILITY_ISSUE = 11;\n  }\n  optional Effect effect = 7 [default = UNKNOWN_EFFECT];\n\n  // The URL which provides additional information about the alert.\n  optional TranslatedString url = 8;\n\n  // Alert header. Contains a short summary of the alert text as plain-text.\n  optional TranslatedString header_text = 10;\n\n  // Full description for the alert as plain-text. The information in the\n  // description should add to the information of the header.\n  optional TranslatedString description_text = 11;\n\n  // Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text.\n  optional TranslatedString tts_header_text = 12;\n\n  // Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text.\n  optional TranslatedString tts_description_text = 13;\n\n  // Severity of this alert.\n  enum SeverityLevel {\n\tUNKNOWN_SEVERITY = 1;\n\tINFO = 2;\n\tWARNING = 3;\n\tSEVERE = 4;\n  }\n\n  optional SeverityLevel severity_level = 14 [default = UNKNOWN_SEVERITY];\n\n  // TranslatedImage to be displayed along the alert text. Used to explain visually the alert effect of a detour, station closure, etc. The image must enhance the understanding of the alert. Any essential information communicated within the image must also be contained in the alert text.\n  // The following types of images are discouraged : image containing mainly text, marketing or branded images that add no additional information. \n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional TranslatedImage image = 15; \n\n  // Text describing the appearance of the linked image in the `image` field (e.g., in case the image can't be displayed\n  // or the user can't see the image for accessibility reasons). See the HTML spec for alt image text - https://html.spec.whatwg.org/#alt.\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional TranslatedString image_alternative_text = 16;\n  \n  \n  // Description of the cause of the alert that allows for agency-specific language; more specific than the Cause. If cause_detail is included, then Cause must also be included.\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional TranslatedString cause_detail = 17;\n  \n  // Description of the effect of the alert that allows for agency-specific language; more specific than the Effect. If effect_detail is included, then Effect must also be included.\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional TranslatedString effect_detail = 18;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features\n  // and modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n//\n// Low level data structures used above.\n//\n\n// A time interval. The interval is considered active at time 't' if 't' is\n// greater than or equal to the start time and less than the end time.\nmessage TimeRange {\n  // Start time, in POSIX time (i.e., number of seconds since January 1st 1970\n  // 00:00:00 UTC).\n  // If missing, the interval starts at minus infinity.\n  optional uint64 start = 1;\n\n  // End time, in POSIX time (i.e., number of seconds since January 1st 1970\n  // 00:00:00 UTC).\n  // If missing, the interval ends at plus infinity.\n  optional uint64 end = 2;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// A position.\nmessage Position {\n  // Degrees North, in the WGS-84 coordinate system.\n  required float latitude = 1;\n\n  // Degrees East, in the WGS-84 coordinate system.\n  required float longitude = 2;\n\n  // Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.\n  // This can be the compass bearing, or the direction towards the next stop\n  // or intermediate location.\n  // This should not be direction deduced from the sequence of previous\n  // positions, which can be computed from previous data.\n  optional float bearing = 3;\n\n  // Odometer value, in meters.\n  optional double odometer = 4;\n  // Momentary speed measured by the vehicle, in meters per second.\n  optional float speed = 5;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// A descriptor that identifies an instance of a GTFS trip, or all instances of\n// a trip along a route.\n// - To specify a single trip instance, the trip_id (and if necessary,\n//   start_time) is set. If route_id is also set, then it should be same as one\n//   that the given trip corresponds to.\n// - To specify all the trips along a given route, only the route_id should be\n//   set. Note that if the trip_id is not known, then stop sequence ids in\n//   TripUpdate are not sufficient, and stop_ids must be provided as well. In\n//   addition, absolute arrival/departure times must be provided.\nmessage TripDescriptor {\n  // The trip_id from the GTFS feed that this selector refers to.\n  // For non frequency-based trips, this field is enough to uniquely identify\n  // the trip. For frequency-based trip, start_time and start_date might also be\n  // necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from\n  // static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id\n  // identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id.\n  optional string trip_id = 1;\n\n  // The route_id from the GTFS that this selector refers to.\n  optional string route_id = 5;\n\n  // The direction_id from the GTFS feed trips.txt file, indicating the\n  // direction of travel for trips this selector refers to.\n  optional uint32 direction_id = 6;\n\n  // The initially scheduled start time of this trip instance.\n  // When the trip_id corresponds to a non-frequency-based trip, this field\n  // should either be omitted or be equal to the value in the GTFS feed. When\n  // the trip_id correponds to a frequency-based trip, the start_time must be\n  // specified for trip updates and vehicle positions. If the trip corresponds\n  // to exact_times=1 GTFS record, then start_time must be some multiple\n  // (including zero) of headway_secs later than frequencies.txt start_time for\n  // the corresponding time period. If the trip corresponds to exact_times=0,\n  // then its start_time may be arbitrary, and is initially expected to be the\n  // first departure of the trip. Once established, the start_time of this\n  // frequency-based trip should be considered immutable, even if the first\n  // departure time changes -- that time change may instead be reflected in a\n  // StopTimeUpdate.\n  // Format and semantics of the field is same as that of\n  // GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35.\n  optional string start_time = 2;\n  // The scheduled start date of this trip instance.\n  // Must be provided to disambiguate trips that are so late as to collide with\n  // a scheduled trip on a next day. For example, for a train that departs 8:00\n  // and 20:00 every day, and is 12 hours late, there would be two distinct\n  // trips on the same time.\n  // This field can be provided but is not mandatory for schedules in which such\n  // collisions are impossible - for example, a service running on hourly\n  // schedule where a vehicle that is one hour late is not considered to be\n  // related to schedule anymore.\n  // In YYYYMMDD format.\n  optional string start_date = 3;\n\n  // The relation between this trip and the static schedule. If a trip is done\n  // in accordance with temporary schedule, not reflected in GTFS, then it\n  // shouldn't be marked as SCHEDULED, but likely as ADDED.\n  enum ScheduleRelationship {\n    // Trip that is running in accordance with its GTFS schedule, or is close\n    // enough to the scheduled trip to be associated with it.\n    SCHEDULED = 0;\n\n    // An extra trip that was added in addition to a running schedule, for\n    // example, to replace a broken vehicle or to respond to sudden passenger\n    // load.\n    // NOTE: Currently, behavior is unspecified for feeds that use this mode. There are discussions on the GTFS GitHub\n    // [(1)](https://github.com/google/transit/issues/106) [(2)](https://github.com/google/transit/pull/221)\n    // [(3)](https://github.com/google/transit/pull/219) around fully specifying or deprecating ADDED trips and the\n    // documentation will be updated when those discussions are finalized.\n    ADDED = 1;\n\n    // A trip that is running with no schedule associated to it (GTFS frequencies.txt exact_times=0).\n    // Trips with ScheduleRelationship=UNSCHEDULED must also set all StopTimeUpdates.ScheduleRelationship=UNSCHEDULED.\n    UNSCHEDULED = 2;\n\n    // A trip that existed in the schedule but was removed.\n    CANCELED = 3;\n\n    // Should not be used - for backwards-compatibility only.\n    REPLACEMENT = 5 [deprecated=true];\n\n    // An extra trip that was added in addition to a running schedule, for example, to replace a broken vehicle or to\n    // respond to sudden passenger load. Used with TripUpdate.TripProperties.trip_id, TripUpdate.TripProperties.start_date,\n    // and TripUpdate.TripProperties.start_time to copy an existing trip from static GTFS but start at a different service\n    // date and/or time. Duplicating a trip is allowed if the service related to the original trip in (CSV) GTFS\n    // (in calendar.txt or calendar_dates.txt) is operating within the next 30 days. The trip to be duplicated is\n    // identified via TripUpdate.TripDescriptor.trip_id. This enumeration does not modify the existing trip referenced by\n    // TripUpdate.TripDescriptor.trip_id - if a producer wants to cancel the original trip, it must publish a separate\n    // TripUpdate with the value of CANCELED. Trips defined in GTFS frequencies.txt with exact_times that is empty or\n    // equal to 0 cannot be duplicated. The VehiclePosition.TripDescriptor.trip_id for the new trip must contain\n    // the matching value from TripUpdate.TripProperties.trip_id and VehiclePosition.TripDescriptor.ScheduleRelationship\n    // must also be set to DUPLICATED.\n    // Existing producers and consumers that were using the ADDED enumeration to represent duplicated trips must follow\n    // the migration guide (https://github.com/google/transit/tree/master/gtfs-realtime/spec/en/examples/migration-duplicated.md)\n    // to transition to the DUPLICATED enumeration.\n    // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n    DUPLICATED = 6;\n  }\n  optional ScheduleRelationship schedule_relationship = 4;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// Identification information for the vehicle performing the trip.\nmessage VehicleDescriptor {\n  // Internal system identification of the vehicle. Should be unique per\n  // vehicle, and can be used for tracking the vehicle as it proceeds through\n  // the system.\n  optional string id = 1;\n\n  // User visible label, i.e., something that must be shown to the passenger to\n  // help identify the correct vehicle.\n  optional string label = 2;\n\n  // The license plate of the vehicle.\n  optional string license_plate = 3;\n\n  enum WheelchairAccessible {\n    // The trip doesn't have information about wheelchair accessibility.\n    // This is the **default** behavior. If the static GTFS contains a\n    // _wheelchair_accessible_ value, it won't be overwritten.\n    NO_VALUE = 0;\n\n    // The trip has no accessibility value present.\n    // This value will overwrite the value from the GTFS.\n    UNKNOWN = 1;\n\n    // The trip is wheelchair accessible.\n    // This value will overwrite the value from the GTFS.\n    WHEELCHAIR_ACCESSIBLE = 2;\n\n    // The trip is **not** wheelchair accessible.\n    // This value will overwrite the value from the GTFS.\n    WHEELCHAIR_INACCESSIBLE = 3;\n  }\n  optional WheelchairAccessible wheelchair_accessible = 4 [default = NO_VALUE];\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// A selector for an entity in a GTFS feed.\nmessage EntitySelector {\n  // The values of the fields should correspond to the appropriate fields in the\n  // GTFS feed.\n  // At least one specifier must be given. If several are given, then the\n  // matching has to apply to all the given specifiers.\n  optional string agency_id = 1;\n  optional string route_id = 2;\n  // corresponds to route_type in GTFS.\n  optional int32 route_type = 3;\n  optional TripDescriptor trip = 4;\n  optional string stop_id = 5;\n  // Corresponds to trip direction_id in GTFS trips.txt. If provided the\n  // route_id must also be provided.\n  optional uint32 direction_id = 6;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// An internationalized message containing per-language versions of a snippet of\n// text or a URL.\n// One of the strings from a message will be picked up. The resolution proceeds\n// as follows:\n// 1. If the UI language matches the language code of a translation,\n//    the first matching translation is picked.\n// 2. If a default UI language (e.g., English) matches the language code of a\n//    translation, the first matching translation is picked.\n// 3. If some translation has an unspecified language code, that translation is\n//    picked.\nmessage TranslatedString {\n  message Translation {\n    // A UTF-8 string containing the message.\n    required string text = 1;\n    // BCP-47 language code. Can be omitted if the language is unknown or if\n    // no i18n is done at all for the feed. At most one translation is\n    // allowed to have an unspecified language tag.\n    optional string language = 2;\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features and\n    // modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n  // At least one translation must be provided.\n  repeated Translation translation = 1;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// An internationalized image containing per-language versions of a URL linking to an image\n// along with meta information\n// Only one of the images from a message will be retained by consumers. The resolution proceeds\n// as follows:\n// 1. If the UI language matches the language code of a translation,\n//    the first matching translation is picked.\n// 2. If a default UI language (e.g., English) matches the language code of a\n//    translation, the first matching translation is picked.\n// 3. If some translation has an unspecified language code, that translation is\n//    picked.\n// NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\nmessage TranslatedImage {\n  message LocalizedImage {\n    // String containing an URL linking to an image\n    // The image linked must be less than 2MB. \n    // If an image changes in a significant enough way that an update is required on the consumer side, the producer must update the URL to a new one.\n    // The URL should be a fully qualified URL that includes http:// or https://, and any special characters in the URL must be correctly escaped. See the following http://www.w3.org/Addressing/URL/4_URI_Recommentations.html for a description of how to create fully qualified URL values.\n    required string url = 1;\n\n    // IANA media type as to specify the type of image to be displayed. \n    // The type must start with \"image/\"\n    required string media_type = 2;\n\n    // BCP-47 language code. Can be omitted if the language is unknown or if\n    // no i18n is done at all for the feed. At most one translation is\n    // allowed to have an unspecified language tag.\n    optional string language = 3;\n\n\n    // The extensions namespace allows 3rd-party developers to extend the\n    // GTFS Realtime Specification in order to add and evaluate new features and\n    // modifications to the spec.\n    extensions 1000 to 1999;\n\n    // The following extension IDs are reserved for private use by any organization.\n    extensions 9000 to 9999;\n  }\n  // At least one localized image must be provided.\n  repeated LocalizedImage localized_image = 1;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}\n\n// Describes the physical path that a vehicle takes when it's not part of the (CSV) GTFS,\n// such as for a detour. Shapes belong to Trips, and consist of a sequence of shape points.\n// Tracing the points in order provides the path of the vehicle.  Shapes do not need to intercept\n// the location of Stops exactly, but all Stops on a trip should lie within a small distance of\n// the shape for that trip, i.e. close to straight line segments connecting the shape points\n// NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future.\nmessage Shape {\n  // Identifier of the shape. Must be different than any shape_id defined in the (CSV) GTFS.\n  // This field is required as per reference.md, but needs to be specified here optional because \"Required is Forever\"\n  // See https://developers.google.com/protocol-buffers/docs/proto#specifying_field_rules\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional string shape_id = 1;\n  \n  // Encoded polyline representation of the shape. This polyline must contain at least two points.\n  // For more information about encoded polylines, see https://developers.google.com/maps/documentation/utilities/polylinealgorithm\n  // This field is required as per reference.md, but needs to be specified here optional because \"Required is Forever\"\n  // See https://developers.google.com/protocol-buffers/docs/proto#specifying_field_rules\n  // NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.\n  optional string encoded_polyline = 2;\n\n  // The extensions namespace allows 3rd-party developers to extend the\n  // GTFS Realtime Specification in order to add and evaluate new features and\n  // modifications to the spec.\n  extensions 1000 to 1999;\n\n  // The following extension IDs are reserved for private use by any organization.\n  extensions 9000 to 9999;\n}"
      quote: ~
    type: protobuf
url: "http://realtime.cota.com/TMGTFSRealTimeWebService/Alert/Alerts.pb"
sops:
  kms: ~
  gcp_kms:
    - resource_id: projects/helpful-kingdom-273219/locations/us-central1/keyRings/catalog-sops/cryptoKeys/config-encryptor
      created_at: "2022-08-20T21:27:52Z"
      enc: CiQABM8p++60Ywxd/4KzLC0GHJ7J+BMXFni7A1FBvyWnfVdreXkSSQDqeAqHGVf597tfA8egav9YZ+9qOqSCf/+TA/9KHdeTGHguyxoBkn/s2M3vjZlOXCaKKNbmvdTwU952sXvq7MoWtFJeXvoSXWo=
  azure_kv: ~
  hc_vault: ~
  age: ~
  lastmodified: "2022-08-20T21:27:52Z"
  mac: "ENC[AES256_GCM,data:fRlnIqup+Qt5aDc4pPwzoqzIf5IBVRcNOQjmn9J0vwi3DZQqYqU+C5TUPamb2oHOVgtUPt+0dGz2kuvUdPdDXlybpqv78B2l3ChzBI3gVam5gnV/LxkDRDDnnLYHJhUyNgqxywMF+MyTaDb6V84/Gj/DtVZUYm3T29XAj/HVBiY=,iv:JprRIlwYfOH5v+GmNY4Q6VaU9eG6aS//qiBTpxOdQXs=,tag:YR44QbNDvh5CL4fBCTl94A==,type:str]"
  pgp: ~
  encrypted_suffix: _sops
  version: 3.7.3
